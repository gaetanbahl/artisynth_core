ROOT_DIR = ../../../..

LIB_TARGET_DIR = $(ROOT_DIR)/lib/Linux
CLASS_DIR = $(ROOT_DIR)/classes/maspack/geometry
CLASS_ROOT_DIR = $(ROOT_DIR)/classes

default: libs

ifndef ARTISYNTH_CORE_DIR
ARTISYNTH_CORE_DIR = $(ROOT_DIR)/../artisynth_core
endif
CLASS_ROOT_DIR := .:$(ROOT_DIR)/classes:$(ARTISYNTH_CORE_DIR)/classes

CC_FLAGS = -O2 -DTETLIBRARY -I.
C_FLAGS = -O2 -std=c99 -mfpmath=sse -msse -I.

# current version of tetgen. Make sure there is no whitespace at the end.
TETGEN_VERSION = 1.5.1.0

X_FLAGS = -D_JNI_IMPLEMENTATION_
NATIVE_DIR = Windows32
C_COMP = i686-w64-mingw32-gcc # Mingw-w64, gcc, 32 bit target
C_FLAGS += -static-libgcc
CC_COMP = i686-w64-mingw32-g++ # Mingw-w64, g++, 32 bit target
CC_FLAGS += -static-libstdc++
ifndef JAVA_HOME
   JAVA_HOME = C:/Program Files/Java/jdk1.6.0_24
endif
CC_INCS = -I"$(JAVA_HOME)/include" -I"$(JAVA_HOME)/include/win32"  -I"$(JAVA_HOME)/include/linux"
TETGEN_TARGET = TetgenJNI.$(TETGEN_VERSION).dll
ROBUST_TARGET = RobustPreds.1.1.dll
ROBUST_TARGET_OLD = RobustPreds.0.0.dll
SHEWCHUK_DEF = -DCPU86
COLON = :
SEMICOLON = ;
LIB_FLAGS = -shared -Wl,--add-stdcall-alias -static-libgcc

LIB_TARGET_DIR = $(ROOT_DIR)/lib/$(NATIVE_DIR)

C_FLAGS += $(X_FLAGS)
CC_FLAGS += $(X_FLAGS)

JNI_H_FILES = \
	maspack_geometry_TetgenTessellator.h \
	maspack_geometry_RobustPreds.h

maspack_geometry_TetgenTessellator.h: $(CLASS_DIR)/TetgenTessellator.class
	$(JAVAH) $(JAVAHFLAGS) -classpath $(CLASS_ROOT_DIR) maspack.geometry.TetgenTessellator

maspack_geometry_RobustPreds.h: $(CLASS_DIR)/RobustPreds.class
	$(JAVAH) $(JAVAHFLAGS) -classpath .:$(CLASS_ROOT_DIR) maspack.geometry.RobustPreds

tetgen.o: tetgen.cxx
	$(CC_COMP) $(CC_FLAGS) $(CC_INCS) -c tetgen.cxx

# these are the predicates used by Tetgen
# use -O0 to make sure optimbgization is disabled for predicates.o
# aho: tetgen replies that it works just fine with optimization, 
#      consider removing the -O0
predicates.o: predicates.cxx
	$(CC_COMP) $(CC_FLAGS) -O0 $(CC_INCS) -c predicates.cxx

tetgenJNI.o: tetgenJNI.cc $(JNI_H_FILES)
	$(CC_COMP) $(CC_FLAGS) $(CC_INCS) -c tetgenJNI.cc

tetgenTest: tetgenTest.cc tetgenJNI.o tetgen.o predicates.o
	$(CC_COMP) $(CC_FLAGS) $(CC_INCS) -static-libgcc  -o $@ $^ -lm

$(LIB_TARGET_DIR)/$(TETGEN_TARGET): tetgenJNI.o tetgen.o predicates.o
	$(CC_COMP) $(CC_FLAGS) $(LIB_FLAGS) -o $@ $^ -lm

# I am not using the optimization 0 because it is twice as slow
# I wonder why they do it for predicates.cxx?
predicatesC.o: predicatesC.c predicatesC.h
	$(C_COMP) $(C_FLAGS) $(CC_INCS) $(SHEWCHUK_DEF) -c predicatesC.c

geoPredShewchuck.o: geoPredShewchuck.c predicatesC.h 
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -c $^

exact.o: exact.c exactArithmetic.h exact.h floatStatus.h
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -c $^

geoPredAJL.o: geoPredAJL.c exactArithmetic.h exact.h floatStatus.h
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -c $^

RobustPredsJNI.o: RobustPredsJNI.c $(JNI_H_FILES)
	$(C_COMP) $(C_FLAGS) $(CC_INCS) $(SHEWCHUK_DEF) -c RobustPredsJNI.c

geoPred.o: geoPred.c geoPred.h ahoVectorMacro.h
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -c $^

geoPredTest: geoPred.o geoPredTest.c
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -o $@ $^ -lm

ajlTimeTest: geoPred.o ahoTimeTest.c geoPredAJL.o exact.o
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -o $@ $^ -lm

shewchuckTimeTest: geoPred.o ahoTimeTest.c geoPredShewchuck.o predicatesC.o
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -o $@ $^ -lm

vector.o: vecmath/vector.c vecmath/vector.h 
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -c $^ 
matrix.o: vecmath/matrix.c vecmath/matrix.h
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -c $^

AJLConsistencyTest: geoPred.o ahoConsistentTest.c geoPredAJL.o exact.o vector.o matrix.o
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -o $@ $^ -lm

shewchukConsistencyTest: geoPred.o ahoConsistentTest.c geoPredShewchuck.o predicatesC.o vector.o matrix.o
	$(C_COMP) $(C_FLAGS) $(CC_INCS) -o $@ $^ -lm

#getCWJNI.o: getCWJNI.c $(JNI_H_FILES)
#	$(C_COMP) $(C_FLAGS) $(CC_INCS) -c $^

$(LIB_TARGET_DIR)/$(ROBUST_TARGET_OLD): RobustPredsJNI.o geoPred.o geoPredAJL.o exact.o
	$(C_COMP) $(C_FLAGS) $(LIB_FLAGS) -o $@ $^ -lm

$(LIB_TARGET_DIR)/$(ROBUST_TARGET): RobustPredsJNI.o geoPred.o geoPredShewchuck.o predicatesC.o
	$(C_COMP) $(C_FLAGS) $(LIB_FLAGS) -o $@ $^ -lm
#$(LIB_TARGET_DIR)/$(GETCW_TARGET): getCWJNI.o
#	$(C_COMP) $(C_FLAGS) $(LIB_FLAGS) -o $@ $^ -lm

LIB_ROBUST_TARGET = $(LIB_TARGET_DIR)/$(ROBUST_TARGET)
LIB_TETGEN_TARGET = $(LIB_TARGET_DIR)/$(TETGEN_TARGET)

LIB_TARGETS = $(LIB_ROBUST_TARGET) # $(LIB_TETGEN_TARGET)

libs:	$(LIB_TARGETS)
#$(LIB_TARGET_DIR)/$(GETCW_TARGET)

install: $(LIB_TARGETS)
	rsync -Ctrlgo $(LIB_TARGETS) $(WEB_LIB_URL)/$(NATIVE_DIR)
	$(MAKE_HASHES_AND_FIX_PERMISSIONS)

depend:	$(JNI_H_FILES)

-include $(ROOT_DIR)/Makefile.base

